import sys

def c_var(name):
    return '_'.join(name.split('-'))

def hmp_type_to_c(argtype):
    if argtype == 'int':
        return 'int'
    elif argtype == 'targetlong':
        return 'target_ulong'
    elif argtype == 'str':
        return 'const char *'
    elif argtype == 'blockdev':
        return 'const char *'
    elif argtype == 'bool':
        return 'bool'
    elif argtype == 'flag':
        return 'bool'
    elif argtype == 'file':
        return 'const char *'
    elif argtype == 'gdbfmt':
        return 'const char *'
    elif argtype == 'opts':
        return 'QemuOpts *'
    elif argtype == 'size':
        return 'int64_t'
    elif argtype == 'time':
        return 'int64_t'
    elif argtype == 'sizemb':
        return 'int64_t'
    else:
        return 'unknown(%s)' % argtype

def hmp_type_from_str(argtype):
    return 'hmp_parse_%s' % argtype

def parsearg(e):
    argname = e.keys()[0]
    argtype = e[argname]
    optional = False
    if argname.startswith('*'):
        optional = True
        argname = argname[1:]
    return argname, argtype, optional

def print_declaration(name, expr):
    args = ['Monitor *mon']
    for e in expr:
        argname, argtype, optional = parsearg(e)
        if optional:
            args.append('bool has_%s' % c_var(argname))
        args.append('%s %s' % (hmp_type_to_c(argtype), c_var(argname)))
            
    print "void hmp_%s(%s);" % (name, ', '.join(args))

def print_definition(name, expr):
    print '''
static void hmp_marshal_%s(Monitor *mon, int argc, char **argv)
{''' % name

    args = ['mon']
    if len(expr):
        print '    int optind = 0;'
        for e in expr:
            argname, argtype, optional = parsearg(e)
            if argtype == 'flag':
                print '    bool %s = false;' % c_var(argname)
            elif optional:
                print '    bool has_%s = false;' % c_var(argname)
                print '    %s %s = 0;' % (hmp_type_to_c(argtype), c_var(argname))
            else:
                print '    %s %s;' % (hmp_type_to_c(argtype), c_var(argname))

        for e in expr:
            argname, argtype, optional = parsearg(e)
            if argtype == 'flag':
                print '''
    if ((argc - optind) && strcmp(argv[optind], "-%s") == 0) {
        %s = true;
        optind++;
    }''' % (argname[0], c_var(argname))
                args.append(c_var(argname))
            elif optional:
                print '''
    if ((argc - optind)) {
        has_%s = true;
        %s = %s(argv[optind++]);
    }''' % (c_var(argname), c_var(argname), hmp_type_from_str(argtype))
                args.append('has_%s' % c_var(argname))
                args.append(c_var(argname))
            else:
                print '''
    if ((argc - optind) < 1) {
        monitor_printf(mon, "missing option: %s\\n");
        return;
    }
    %s = %s(argv[optind++]);''' % (argname, c_var(argname), hmp_type_from_str(argtype))
                args.append(c_var(argname))

    print '''
    if (argc != optind) {
        monitor_printf(mon, "extra arguments in command\\n");
        return;
    }
    hmp_%s(%s);
}''' % (name, ', '.join(args))

if __name__ == '__main__':
    kind = 'body'
    if len(sys.argv) == 2:
        if sys.argv[1] == '--body':
            kind = 'body'
        elif sys.argv[1] == '--header':
            kind = 'header'

    if kind == 'header':
        print '''/* THIS FILE IS AUTOMATICALLY GENERATED, DO NOT EDIT */
#ifndef HMP_H
#define HMP_H

#include "qemu-common.h"
'''
    else:
        print '''/* THIS FILE IS AUTOMATICALLY GENERATED, DO NOT EDIT */

#include "hmp.h"
#include "hmp-marshal-helpers.h"
'''

    commands = []

    for line in sys.stdin:
        expr = eval(line)

        name = []
        while expr and type(expr[0]) == str:
            name.append(c_var(expr[0]))
            expr = expr[1:]
        commands.append(name)
        name = '_'.join(name)

        if kind == 'header':
            print_declaration(name, expr)
        elif kind == 'body':
            print_definition(name, expr)

    if kind == 'header':
        print "#endif"
    else:
        print '''
static void hmp_init_marshal(void)
{'''
        for name in commands:
            fn = 'hmp_marshal_%s' % c_var('_'.join(name))
            if len(name) == 1:
                print '    hmp_register_command("%s", &%s);' % (name[0], fn)
            elif len(name) == 2 and name[0] == 'info':
                print '    hmp_register_info_command("%s", &%s);' % (name[1], fn)
            else:
                raise Exception("bad command format %s" % name)
        print '''}

qmp_init(hmp_init_marshal);
'''
