#!/usr/bin/python

import sys, socket, getopt, time
from select import select

def help():
    print """Usage: monitor-cmd [OPTIONS] SOCKET COMMAND
Where OPTIONS can be:

 -h,--help        Display this help screen
 -t,--timeout=S   Wait up to S seconds for command to complete
 -n,--no-banner   Wait for a banner to appear
 -w,--no-wait     Don't wait for command output

Report bugs to <qemu-devel@nongnu.org"""

opts, args = getopt.getopt(sys.argv[1:],
                           'ht:nw',
                           ['help', 'timeout=', 'no-banner', 'no-wait'])

timeout = -1
banner = True
start = time.time()
nowait = False

for opt, val in opts:
    if opt in ['-h', '--help']:
        help()
        sys.exit(0)
    elif opt in ['-t', '--timout']:
        timeout = long(val)
    elif opt in ['-n', '--no-banner']:
        banner = False
    elif opt in ['-w', '--no-wait']:
        nowait = True

if len(args) < 2:
    help()
    sys.exit(1)

s = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)
s.connect(args[0])

def recv_byte_or_timeout(s):
    now = time.time()
    if timeout > -1:
        if (start + timeout) <= now:
            sys.exit(2)
        ret = select([s], [], [], (start + timeout) - now)
    else:
        ret = select([s], [], [])

    if len(ret[0]) == 0:
        sys.exit(2)

    b = s.recv(1)
    if len(b) == 0:
        if nowait:
            sys.exit(0)
        else:
            sys.exit(4)
    return b

buf = ''

if banner:
    while not buf.endswith('\n(qemu) '):
        buf += recv_byte_or_timeout(s)

newargs=[]
for arg in args:
    if arg.find(' ') != -1:
        arg = '"%s"' % arg
    newargs.append(arg)
args=newargs

s.sendall('%s\n' % ' '.join(args[1:]))

while not buf.endswith('\n'):
    buf += recv_byte_or_timeout(s)

line = ''
silent_mode = False

while not nowait and not line == '(qemu) ':
    b = recv_byte_or_timeout(s)
    if b == '\r':
        continue;

    line += b
    if not '(qemu) '.startswith(line):
        if silent_mode:
            sys.stdout.write(line)
            silent_mode = False
        else:
            sys.stdout.write(b)
    else:
        silent_mode = True

    if b == '\n':
        line = ''

s.close()
