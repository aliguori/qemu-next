import sys

types = {
    "uint8": "uint8_t",
    "uint16": "uint16_t",
    "uint32": "uint32_t",
    "uint64": "uint64_t",
    "int8": "int8_t",
    "int16": "int16_t",
    "int32": "int32_t",
    "int64": "int64_t",
    "float": "float",
    "double": "double",
    "bool": "bool",
    "string": "char *",
    "string": "const char *"
}

print """
/* THIS FILE IS AUTOGENERATED, DO NOT MODIFY */

#ifndef VARIANT_GEN_H
#define VARIANT_GEN_H

#define typename(type) ({ \\
    const char *v; \\"""
for typename in types:
    print "    typename_check(type, %s, \"%s\") \\" % (types[typename], typename)
print "    { v = \"unknown\"; } v; })"

for typename in types:
    print """
static inline void plug_getter__%(typename)s(Plug *plug, const char *name, GenericEtter *getter, Visitor *v, Error **errp)
{
    %(type)s (*native_getter)(Plug *) = (%(type)s (*)(Plug *))getter;
    visit_type__%(typename)s(v, native_getter(plug), name, errp);
}

static inline void plug_setter__%(typename)s(Plug *plug, const char *name, GenericEtter *setter, Visitor *v, Error **errp)
{
    void (*native_setter)(Plug *, %(type)s) = (void (*)(Plug *, %(type)s))setter;
    %(type)s value;
    visit_type__%(typename)s(v, &value, name, errp);
    native_setter(plug, value);
}
""" % { 'typename': typename, 'type': types[typename] }

print """
static inline EtterTrampoline *plug_getter_lookup(const char *typename)
{
"""

print "   ",
for typename in types:
    print """if (strcmp(typename, "%(typename)s") == 0) {
        return &plug_getter__%(typename)s;
    } else""" % { 'typename': typename },

print """{
        return 0;
    }
}
"""

print """
static inline EtterTrampoline *plug_setter_lookup(const char *typename)
{
"""

print "   ",
for typename in types:
    print """if (strcmp(typename, "%(typename)s") == 0) {
        return &plug_setter__%(typename)s;
    } else""" % { 'typename': typename },

print """{
        return 0;
    }
}
"""

print """
#endif
"""
