from ordereddict import OrderedDict
from qapi import *
import sys

def generate_visit_struct(name, members):
    ret = mcgen('''

void visit_type_%(name)s(Visiter *m, %(name)s ** obj, const char *name, Error **errp)
{
    visit_start_struct(m, (void **)obj, "%(name)s", name, errp);
''',
                name=name)

    for argname, argtype, optional in parse_args(members):
        if optional:
            ret += mcgen('''
    visit_start_optional(m, &(*obj)->has_%(c_name)s, "%(name)s", errp);
    if ((*obj)->has_%(c_name)s) {
''',
                         c_name=c_var(argname), name=argname)
            push_indent()

        ret += mcgen('''
    visit_type_%(type)s(m, &(*obj)->%(c_name)s, "%(name)s", errp);
''',
                     type=type_name(argtype), c_name=c_var(argname), name=argname)

        if optional:
            pop_indent()
            ret += mcgen('''
    }
    visit_end_optional(m, errp);
''')

    ret += mcgen('''
    visit_end_struct(m, errp);
}
''')
    return ret

def generate_visit_list(name, members):
    return mcgen('''

void visit_type_%(name)sList(Visiter *m, %(name)sList ** obj, const char *name, Error **errp)
{
    GenericList *i;

    visit_start_list(m, name, errp);
    
    for (i = visit_next_list(m, (GenericList **)obj, errp); i; i = visit_next_list(m, &i, errp)) {
        %(name)sList *native_i = (%(name)sList *)i;
        visit_type_%(name)s(m, &native_i->value, NULL, errp);
    }

    visit_end_list(m, errp);
}
''',
                name=name)

def generate_visit_handle(name, typeinfo):
    return mcgen('''

void visit_type_%(name)s(Visiter *m, %(name)s ** obj, const char *name, Error **errp)
{
    visit_start_handle(m, (void **)obj, "%(name)s", name, errp);
    visit_type_%(type_name)s(m, &(*obj)->handle, "handle", errp);
    visit_end_handle(m, errp);
}
''',
                name=name, type_name=type_name(typeinfo))

def generate_visit_enum(name, members):
    return mcgen('''

void visit_type_%(name)s(Visiter *m, %(name)s * obj, const char *name, Error **errp)
{
    visit_type_enum(m, (int *)obj, "%(name)s", name, errp);
}
''',
                 name=name)

def generate_visit_union(name, members):
    ret = generate_visit_enum('%sKind' % name, members.keys())

    ret += mcgen('''

void visit_type_%(name)s(Visiter *m, %(name)s ** obj, const char *name, Error **errp)
{
}
''',
                 name=name)

    return ret

def generate_declaration(name, members, genlist=True):
    ret = mcgen('''

void visit_type_%(name)s(Visiter *m, %(name)s ** obj, const char *name, Error **errp);
''',
                name=name)

    if genlist:
        ret += mcgen('''
void visit_type_%(name)sList(Visiter *m, %(name)sList ** obj, const char *name, Error **errp);
''',
                 name=name)

    return ret

def generate_decl_enum(name, members, genlist=True):
    return mcgen('''

void visit_type_%(name)s(Visiter *m, %(name)s * obj, const char *name, Error **errp);
''',
                name=name)

fdef = open('qapi-visit.c', 'w')
fdecl = open('qapi-visit.h', 'w')

fdef.write('''/* THIS FILE IS AUTOMATICALLY GENERATED, DO NOT MODIFY */

#include "qapi-visit.h"
''')

fdecl.write('''/* THIS FILE IS AUTOMATICALLY GENERATED, DO NOT MODIFY */

#ifndef QAPI_VISIT_H
#define QAPI_VISIT_H

#include "qapi-visit-core.h"
''')

exprs = parse_schema(sys.stdin)

for expr in exprs:
    if expr.has_key('type'):
        ret = generate_visit_struct(expr['type'], expr['data'])
        ret += generate_visit_list(expr['type'], expr['data'])
        fdef.write(ret)

        ret = generate_declaration(expr['type'], expr['data'])
        fdecl.write(ret)
    elif expr.has_key('union'):
        ret = generate_visit_union(expr['union'], expr['data'])
        fdef.write(ret)

        ret = generate_decl_enum('%sKind' % expr['union'], expr['data'].keys())
        ret += generate_declaration(expr['union'], expr['data'])
        fdecl.write(ret)
    elif expr.has_key('enum'):
        ret = generate_visit_enum(expr['enum'], expr['data'])
        fdef.write(ret)

        ret = generate_decl_enum(expr['enum'], expr['data'])
        fdecl.write(ret)
    elif expr.has_key('handle'):
        ret = generate_visit_handle(expr['handle'], expr['data'])
        fdef.write(ret)

        ret = generate_declaration(expr['handle'], expr['data'], False)
        fdecl.write(ret)

fdecl.write('''
#endif
''')

fdecl.flush()
fdecl.close()

fdef.flush()
fdef.close()

