# *-*- Mode: Python -*-*
### 0.14.0 commands.  Do not modify. ###

##
# @quit:
#
# This command will cause the QEMU process to exit gracefully.  While every
# attempt is made to send the QMP response before terminating, this is not
# guaranteed.  When using this interface, a premature EOF would not be
# unexpected.
#
# Since: 0.14.0
##
[ 'quit', {}, {}, 'none' ]

##
# @change:
#
# This command is multiple commands multiplexed together.  Generally speaking,
# it should not be used in favor of the single purpose alternatives such as
# @change-vnc-listen, @change-vnc-password, and @change-blockdev.
#
# @device: This is normally the name of a block device but it may also be 'vnc'.
#          when it's 'vnc', then sub command depends on @target
#
# @target: If @device is a block device, then this is the new filename.
#          If @device is 'vnc', then if the value 'password' selects the vnc
#          change password command.   Otherwise, this specifies a new server URI
#          address to listen to for VNC connections.
#
# @arg:    If @device is a block device, then this is an optional format to open
#          the device with.
#          If @device is 'vnc' and @target is 'password', this is the new VNC
#          password to set.  If this argument is an empty string, then no future
#          logins will be allowed.
#
# Returns: Nothing on success.
#          If @device is not a valid block device, DeviceNotFound
#          If @format is not a valid block format, InvalidBlockFormat
#          If the new block device is encrypted, DeviceEncrypted.  Note that
#          if this error is returned, the device has been opened successfully
#          and an additional call to @block_passwd is required to set the
#          device's password.  The behavior of reads and writes to the block
#          device between when these calls are executed is undefined.
#
# Notes:  It is strongly recommended that this interface is not used especially
#         for changing block devices.
#
# Since: 0.14.0
##
[ 'change', {'device': 'str', 'target': 'str'}, {'arg': 'str'}, 'none' ]

##
# @block_passwd:
#
# This command sets the password of a block device that has not been open
# with a password and requires one.
#
# The two cases where this can happen are a block device is created through
# QEMU's initial command line or a block device is changed through the legacy
# @change interface.
#
# In the event that the block device is created through the initial command
# line, the VM will start in the stopped state regardless of whether '-S' is
# used.  The intention is for a management tool to query the block devices to
# determine which ones are encrypted, set the passwords with this command, and
# then start the guest with the @cont command.
#
# @device:   the name of the device to set the password on
#
# @password: the password to use for the device
#
# Returns: nothing on success
#          If @device is not a valid block device, DeviceNotFound
#          If @device is not encrypted, DeviceNotEncrypted
#          If @password is not valid for this device, InvalidPassword
#
# Notes:  Not all block formats support encryption and some that do are not
#         able to validate that a password is correct.  Disk corruption may
#         occur if an invalid password is specified.
#
# Since: 0.14.0
##
[ 'block_passwd', {'device': 'str', 'password': 'str'}, {}, 'none' ]

##
# @VersionInfo:
#
# A description of QEMU's version.
#
# @qemu.major:  The major version of QEMU
#
# @qemu.minor:  The minor version of QEMU
#
# @qemu.micro:  The micro version of QEMU.  By current convention, a micro
#               version of 50 signifies a development branch.  A micro version
#               greater than or equal to 90 signifies a release candidate for
#               the next minor version.  A micro version of less than 50
#               signifies a stable release.
#
# @package:     QEMU will always set this field to an empty string.  Downstream
#               versions of QEMU should set this to a non-empty string.  The
#               exact format depends on the downstream however it highly
#               recommended that a unique name is used.
#
# Since: 0.14.0
##
{ 'VersionInfo': {'qemu': {'major': 'int', 'minor': 'int', 'micro': 'int'},
                  'package': 'str'} }

##
# @query-version:
#
# Returns the current version of QEMU.
#
# Returns:  A @VersionInfo object describing the current version of QEMU.
#
# Since: 0.14.0
##
[ 'query-version', {}, {}, 'VersionInfo' ]

##
# @eject:
#
# Ejects a device from a removable drive.
#
# @device:  The name of the device
#
# @force:   @optional If true, eject regardless of whether the drive is locked.
#           If not specified, the default value is false.
#
# Returns:  Nothing on success
#           If @device is not a valid block device, DeviceNotFound
#           If @device is not removable and @force is false, DeviceNotRemovable
#           If @force is false and @device is locked, DeviceLocked
#
# Notes:    If the @force flag is used, the backing file will be closed
#           regardless of whether the device is removable.  This may result in
#           a badly broken guest.
#
#           Ejecting a device will no media results in success
#
# Since: 0.14.0
##
[ 'eject', {'device': 'str'}, {'force': 'bool'} , 'none' ]

##
# @qmp_capabilities:
#
# Currently a nop command.  To communicate with older servers, this should be
# sent first before executing new commands.
#
# Since: 0.14.0
##
[ 'qmp_capabilities', {}, {}, 'none' ]

##
# @screendump:
#
# Write a PPM of the VGA screen to a file.
#
# @filename: the name of a new PPM file to create to store the image
#
# Since: 0.14.0
#
# Returns: Nothing on success
#          If @filename cannot be opened, OpenFileFailed
#
# Notes: Not all server versions reliably send an error when file creation
#        fails.
##
[ 'screendump', {'filename': 'str'}, {}, 'none' ]

# 0.15.0 commands.  These can be changed up until the next release

##
# @change-blockdev:
#
# This is the preferred interface for changing a block device.
#
# @device:   The block device name.
#
# @filename: The new filename for the block device.  This may contain options
#            encoded in a format specified by @format.
#
# @format:   #optional The format to use open the block device
#
# @password: #optional The password to use if the block device is encrypted
#
# Returns:  Nothing on success.
#          If @device is not a valid block device, DeviceNotFound
#          If @format is not a valid block format, InvalidBlockFormat
#          If @filename is encrypted and @password isn't supplied,
#            DeviceEncrypted.  The call should be repeated with @password
#            supplied.
#          If @format is not specified and @filename is a format that cannot
#            be safely probed, MissingParameter.
#          If @filename cannot be opened, OpenFileFailed
#
# Since: 0.15.0
##
[ 'change-blockdev', {'device': 'str', 'filename': 'str'},
  {'format': 'str', 'password': 'str'}, 'none' ]

##
# @set-blockdev-password:
#
# Alias for @block_passwd.
#
# @device:   see @block_passwd
# @password: see @block_passwd
#
# Since: 0.15.0
##
[ 'set-blockdev-password', {'device': 'str', 'password': 'str'}, {}, 'none' ]

##
# @change-vnc-listen:
#
# Change the host that the VNC server listens on.
#
# @target:  the new server specification to listen on
#
# Since: 0.15.0
#
# Notes:  At this moment in time, the behavior of existing client connections
#         when this command is executed is undefined.
##
[ 'change-vnc-listen', {'target': 'str'}, {}, 'none' ]

##
# @change-vnc-password:
#
# Change the VNC server password.
#
# @target:  the new password to use with VNC authentication
#
# Since: 0.15.0
#
# Notes:  An empty password in this command will set the password to the empty
#         string.  Existing clients are unaffected by executing this command.
##
[ 'change-vnc-password', {'password': 'str'}, {}, 'none' ]

##
# @stop:
#
# Stop all guest VCPU execution.
#
# Since:  0.14.0
#
# Notes:  This function will succeed even if the guest is already in the stopped
#         state
##
[ 'stop' , {}, {}, 'none' ]

##
# @cont:
#
# Resume guest VCPU execution.
#
# Since:  0.14.0
#
# Returns:  If successful, nothing
#           If the QEMU is waiting for an incoming migration, MigrationExpected
#           If QEMU was started with an encrypted block device and a key has
#              not yet been set, DeviceEncrypted.
#
# Notes:  The function will succeed if the guest is currently running.
##
[ 'cont' , {}, {}, 'none' ]

##
# @StatusInfo:
#
# Information about VCPU run state
#
# @running: true if all VCPUs are runnable, false if not runnable
#
# @singlestep: true if VCPUs are in single-step mode
#
# Since:  0.14.0
#
# Notes: @singlestep is enabled through the GDB stub
##
{ 'StatusInfo': {'running': 'bool', 'singlestep': 'bool'} }

##
# @query-status:
#
# Query the run status of all VCPUs
#
# Returns: @StatusInfo reflecting all VCPUs
#
# Since:  0.14.0
##
[ 'query-status', {}, {}, 'StatusInfo' ]

##
# @BlockDeviceInfo:
#
# Information about the backing device for a block device.
#
# @file: the filename of the backing device
#
# @ro: true if the backing device was open read-only
#
# @drv: the name of the block format used to open the backing dvice
#
# @backing_file: #optional the name of the backing file (for copy-on-write)
#
# @encrypted: true if the backing device is encrypted
#
# Since: 0.14.0
#
# Notes: This interface is only found in @BlockInfo.
##
{ 'BlockDeviceInfo': { 'file': 'str', 'ro': 'bool', 'drv': 'str',
                       '*backing_file': 'str', 'encrypted': 'bool' } }

##
# @BlockInfo:
#
# Block device information.  This structure describes a physical device and
# the blockdev associated with it.
#
# @device: The device name associated of the physical device.
#
# @type: A string describing the device type.  As of 0.14.0, this may be
#          'cdrom', 'hd', 'floppy', or 'unknown'.
#
# @removable: True if the device supports removable media.
#
# @locked: True if the guest has locked this device from having its media
#            removed
#
# @inserted: #optional #BlockDeviceInfo describing the device if media is
#            present
#
# Since:  0.14.0
##
{ 'BlockInfo': {'device': 'str', 'type': 'str', 'removable': 'bool',
                'locked': 'bool', '*inserted': 'BlockDeviceInfo'} }
[ 'query-block', {}, {}, ['BlockInfo'] ]

{ 'BlockStats': {'*device': 'str',
                 'stats': {'rd_bytes': 'int', 'wr_bytes': 'int',
                           'rd_operations': 'int', 'wr_operations': 'int',
                           'wr_highest_offset': 'int'},
                 '*parent': 'BlockStats'}}
[ 'query-blockstats', {}, {}, ['BlockStats'] ]

{ 'KeyValues': {'key': 'str', 'value': 'str'} }
[ 'device_add', {'driver': 'str', 'id': 'str'}, {'opts': '**'}, 'none' ]

#[ 'system_reset' , {}, {}, 'none' ]
#[ 'system_powerdown' , {}, {}, 'none' ]
#[ 'device_del', {'id': 'str'}, {}, 'none' ]
#[ 'cpu', {'index': 'int'}, {}, 'none' ]
#[ 'memsave', {'val': 'int', 'size': 'int', 'filename': 'str'}, {}, 'none' ]
#[ 'pmemsave', {'val': 'int', 'size': 'int', 'filename': 'str'}, {}, 'none' ]
#[ 'migrate', {'uri': 'str'}, {'blk': 'bool', 'inc': 'bool'}, 'none' ]
#[ 'migrate_cancel', {}, {}, 'none' ]
#[ 'migrate_set_speed', {'value': 'int'}, {}, 'none' ]
#[ 'migrate_set_downtime', {'value': 'number'}, {}, 'none' ]
#[ 'netdev_add', {'type': 'str', 'id': 'str'}, {'**': 'dict'}, 'none' ]
#[ 'netdev_del', {'id': 'str'}, {}, 'none' ]
#[ 'balloon', {'value': 'int'}, {}, 'none' ]
#[ 'set_link', {'name': 'str', 'up': 'bool'}, {}, 'none' ]
#[ 'getfd', {'fdname': 'str'}, {}, 'none' ]
#[ 'closefd', {'fdname': 'str'}, {}, 'none' ]
#[ 'set_password', {'protocol': 'str', 'password': 'str'}, {'connected': 'str'}, 'none' ]
#[ 'expire_password', {'protocol': 'str', 'time': 'str'}, {}, 'none' ]
#[ 'human-monitor-command', {'command-line': 'str'}, {'cpu-index': 'int'}, 'str' ] 
#
#{ 'CommandInfo': {'name': 'str'} }
#[ 'query-commands', {}, {}, ['CommandInfo'] ]
#
#{ 'ChardevInfo': {'label': 'str', 'filename': 'str'} }
#[ 'query-chardev', {}, {}, ['ChardevInfo'] ]
#
#{ 'CpuInfo': {'CPU': 'int', 'current': 'bool', 'halted': 'bool', '*pc': 'int', '*nip': 'int', '*npc': 'int', '*PC': 'int'} }
#[ 'query-cpus', {}, {}, ['CpuInfo'] ]
#
#{ 'PciMemoryRange': {'base': 'int', 'limit': 'int'} }
#
#{ 'PciBridge': {'bus': 'int', 'secondary': 'int', 'subordinate': 'int', 'io_range': 'PciMemoryRange', 'memory_range': 'PciMemoryRange', 'prefetchable_range': 'PciMemoryRange', '*devices': ['PciDevice']} }
#
#{ 'PciDevice': {'bus': 'int', 'slot': 'int', 'function': 'int', 'class_info': {'*desc': 'str', 'class': 'int'}, 'id': {'device': 'int', 'vendor': 'int'}, '*irq': 'int', 'qdev_id': 'str', '*pci_bridge': 'PciBridge', 'regions': ['PciMemoryRange']} }
#
#{ 'PciInfo': {'bus': 'int', 'devices': ['PciDevice']} }
#[ 'query-pci', {}, {}, ['PciInfo'] ]
#
#{ 'KvmInfo': {'enabled': 'bool', 'present': 'bool'} }
#[ 'query-kvm', {}, {}, 'KvmInfo' ]
#
#{ 'MouseInfo': {'name': 'str', 'index': 'int', 'current': 'bool', 'absolute': 'bool'} }
#[ 'query-mice', {}, {}, ['MouseInfo'] ]
#
#{ 'VncClientInfo': {'host': 'str', 'family': 'str', 'service': 'str', '*x509_dname': 'str', '*sasl_username': 'str'} }
#{ 'VncInfo': {'enabled': 'bool', 'host': 'str', 'family': 'str', 'service': 'str', 'auth': 'str', 'clients': ['VncClientInfo']} }
#
#[ 'query-vnc', {}, {}, 'VncInfo' ]
#
#{ 'SpiceChannel': {'host': 'str', 'family': 'str', 'port': 'str', 'connection-id': 'int', 'channel-type': 'int', 'channel-id': 'int', 'tls': 'bool'} }
#{ 'SpiceInfo': {'enabled': 'bool', 'host': 'str', '*port': 'int', '*tls-port': 'int', 'auth': 'str', 'channels': ['SpiceChannel']} }
#[ 'query-spice', {}, {}, 'SpiceInfo' ]
#
#{ 'NameInfo': {'name': 'str'} }
#[ 'query-name', {}, {}, 'NameInfo' ]
#
#{ 'UuidInfo': {'UUID': 'str'} }
#[ 'query-uuid', {}, {}, 'UuidInfo' ]
#
#{ 'MigrationStats': {'transferred': 'int', 'remaining': 'int', 'total': 'int' } }
#{ 'MigrationInfo': {'*status': 'str', '*ram': 'MigrationStats', '*disk': 'MigrationStats'} }
#[ 'query-migrate', {}, {}, 'MigrationInfo' ]
#
#{ 'BalloonInfo': {'actual': 'int', '*mem_swapped_in': 'int', '*mem_swapped_out': 'int', '*major_page_faults': 'int', '*minor_page_faults': 'int', '*free_mem': 'int', '*total_mem': 'int'} }
#[ 'query-balloon', {}, {}, 'BalloonInfo' ]
#
