# *-*- Mode: Python -*-*

##
# QMP Schema
#
# This file defines the types, commands, and events used by QMP.  It should
# fully describe the interface used by QMP.
#
# This file is designed to be loosely based on JSON although it's technical
# executable Python.  While dictionaries are used, they are parsed as
# OrderedDicts so that ordering is preserved.
#
# There are two basic syntaxes used.  The first syntax defines a type and is
# represented by a dictionary.  There are three kinds of types that are
# supported.
#
# A complex type is a dictionary containing a single key who's value is a
# dictionary.  This corresponds to a struct in C or an Object in JSON.  An
# example of a complex type is:
#
#  { 'MyType': { 'member1': 'str', 'member2': 'int', '*member3': 'str } }
#
# The use of '*' as a prefix to the name means the member is optional.  Optional
# members should always be added to the end of the dictionary to preserve
# backwards compatibility.
#
# An enumeration type is a dictionary containing a single key who's value is a
# list of strings.  An example enumeration is:
#
#  { 'MyEnum': [ 'value1', 'value2', 'value3' ] }
#
# A signal is similar in form to a complex type except the single key is
# entirely upper case instead of CamelCase.  An example signal is:
#
#  { 'MY_SIGNAL': { 'arg1': 'str', 'arg2': 'str' } }
#
# Generally speaking, complex types and enums should always use CamelCase for
# the type names.
#
# Commands are defined by using a list containing three members.  The first
# member is the command name, the second member is a dictionary containing
# arguments, and the third member is the return type.
#
# An example command is:
#
#  [ 'my-command', { 'arg1': 'str', '*arg2': 'str' }, 'none' ]
#
# Command names should be all lower case with words separated by a hyphen.

### 0.14.0 commands.  Do not modify. ###

##
# @quit:
#
# This command will cause the QEMU process to exit gracefully.  While every
# attempt is made to send the QMP response before terminating, this is not
# guaranteed.  When using this interface, a premature EOF would not be
# unexpected.
#
# Since: 0.14.0
##
[ 'quit', {}, 'none' ]

##
# @change:
#
# This command is multiple commands multiplexed together.  Generally speaking,
# it should not be used in favor of the single purpose alternatives such as
# @change-vnc-listen, @change-vnc-password, and @change-blockdev.
#
# @device: This is normally the name of a block device but it may also be 'vnc'.
#          when it's 'vnc', then sub command depends on @target
#
# @target: If @device is a block device, then this is the new filename.
#          If @device is 'vnc', then if the value 'password' selects the vnc
#          change password command.   Otherwise, this specifies a new server URI
#          address to listen to for VNC connections.
#
# @arg:    If @device is a block device, then this is an optional format to open
#          the device with.
#          If @device is 'vnc' and @target is 'password', this is the new VNC
#          password to set.  If this argument is an empty string, then no future
#          logins will be allowed.
#
# Returns: Nothing on success.
#          If @device is not a valid block device, DeviceNotFound
#          If @format is not a valid block format, InvalidBlockFormat
#          If the new block device is encrypted, DeviceEncrypted.  Note that
#          if this error is returned, the device has been opened successfully
#          and an additional call to @block_passwd is required to set the
#          device's password.  The behavior of reads and writes to the block
#          device between when these calls are executed is undefined.
#
# Notes:  It is strongly recommended that this interface is not used especially
#         for changing block devices.
#
# Since: 0.14.0
##
[ 'change', {'device': 'str', 'target': 'str', '*arg': 'str'}, 'none' ]

##
# @block_passwd:
#
# This command sets the password of a block device that has not been open
# with a password and requires one.
#
# The two cases where this can happen are a block device is created through
# QEMU's initial command line or a block device is changed through the legacy
# @change interface.
#
# In the event that the block device is created through the initial command
# line, the VM will start in the stopped state regardless of whether '-S' is
# used.  The intention is for a management tool to query the block devices to
# determine which ones are encrypted, set the passwords with this command, and
# then start the guest with the @cont command.
#
# @device:   the name of the device to set the password on
#
# @password: the password to use for the device
#
# Returns: nothing on success
#          If @device is not a valid block device, DeviceNotFound
#          If @device is not encrypted, DeviceNotEncrypted
#          If @password is not valid for this device, InvalidPassword
#
# Notes:  Not all block formats support encryption and some that do are not
#         able to validate that a password is correct.  Disk corruption may
#         occur if an invalid password is specified.
#
# Since: 0.14.0
##
[ 'block_passwd', {'device': 'str', 'password': 'str'}, 'none' ]

##
# @VersionInfo:
#
# A description of QEMU's version.
#
# @qemu.major:  The major version of QEMU
#
# @qemu.minor:  The minor version of QEMU
#
# @qemu.micro:  The micro version of QEMU.  By current convention, a micro
#               version of 50 signifies a development branch.  A micro version
#               greater than or equal to 90 signifies a release candidate for
#               the next minor version.  A micro version of less than 50
#               signifies a stable release.
#
# @package:     QEMU will always set this field to an empty string.  Downstream
#               versions of QEMU should set this to a non-empty string.  The
#               exact format depends on the downstream however it highly
#               recommended that a unique name is used.
#
# Since: 0.14.0
##
{ 'VersionInfo': {'qemu': {'major': 'int', 'minor': 'int', 'micro': 'int'},
                  'package': 'str'} }

##
# @query-version:
#
# Returns the current version of QEMU.
#
# Returns:  A @VersionInfo object describing the current version of QEMU.
#
# Since: 0.14.0
##
[ 'query-version', {}, 'VersionInfo' ]

##
# @eject:
#
# Ejects a device from a removable drive.
#
# @device:  The name of the device
#
# @force:   @optional If true, eject regardless of whether the drive is locked.
#           If not specified, the default value is false.
#
# Returns:  Nothing on success
#           If @device is not a valid block device, DeviceNotFound
#           If @device is not removable and @force is false, DeviceNotRemovable
#           If @force is false and @device is locked, DeviceLocked
#
# Notes:    If the @force flag is used, the backing file will be closed
#           regardless of whether the device is removable.  This may result in
#           a badly broken guest.
#
#           Ejecting a device will no media results in success
#
# Since: 0.14.0
##
[ 'eject', {'device': 'str', '*force': 'bool'} , 'none' ]

##
# @qmp_capabilities:
#
# Currently a nop command.  To communicate with older servers, this should be
# sent first before executing new commands.
#
# Since: 0.14.0
##
[ 'qmp_capabilities', {}, 'none' ]

##
# @screendump:
#
# Write a PPM of the VGA screen to a file.
#
# @filename: the name of a new PPM file to create to store the image
#
# Since: 0.14.0
#
# Returns: Nothing on success
#          If @filename cannot be opened, OpenFileFailed
#
# Notes: Not all server versions reliably send an error when file creation
#        fails.
##
[ 'screendump', {'filename': 'str'}, 'none' ]

##
# @stop:
#
# Stop all guest VCPU execution.
#
# Since:  0.14.0
#
# Notes:  This function will succeed even if the guest is already in the stopped
#         state
##
[ 'stop' , {}, 'none' ]

##
# @cont:
#
# Resume guest VCPU execution.
#
# Since:  0.14.0
#
# Returns:  If successful, nothing
#           If the QEMU is waiting for an incoming migration, MigrationExpected
#           If QEMU was started with an encrypted block device and a key has
#              not yet been set, DeviceEncrypted.
#
# Notes:  The function will succeed if the guest is currently running.
##
[ 'cont' , {}, 'none' ]

##
# @StatusInfo:
#
# Information about VCPU run state
#
# @running: true if all VCPUs are runnable, false if not runnable
#
# @singlestep: true if VCPUs are in single-step mode
#
# Since:  0.14.0
#
# Notes: @singlestep is enabled through the GDB stub
##
{ 'StatusInfo': {'running': 'bool', 'singlestep': 'bool'} }

##
# @query-status:
#
# Query the run status of all VCPUs
#
# Returns: @StatusInfo reflecting all VCPUs
#
# Since:  0.14.0
##
[ 'query-status', {}, 'StatusInfo' ]

##
# @BlockDeviceInfo:
#
# Information about the backing device for a block device.
#
# @file: the filename of the backing device
#
# @ro: true if the backing device was open read-only
#
# @drv: the name of the block format used to open the backing dvice
#
# @backing_file: #optional the name of the backing file (for copy-on-write)
#
# @encrypted: true if the backing device is encrypted
#
# Since: 0.14.0
#
# Notes: This interface is only found in @BlockInfo.
##
{ 'BlockDeviceInfo': { 'file': 'str', 'ro': 'bool', 'drv': 'str',
                       '*backing_file': 'str', 'encrypted': 'bool' } }

##
# @BlockInfo:
#
# Block device information.  This structure describes a virtual device and
# the backing device associated with it.
#
# @device: The device name associated of the virtual device.
#
# @type: A string describing the device type.  As of 0.14.0, this may be
#          'cdrom', 'hd', 'floppy', or 'unknown'.
#
# @removable: True if the device supports removable media.
#
# @locked: True if the guest has locked this device from having its media
#            removed
#
# @inserted: #optional #BlockDeviceInfo describing the device if media is
#            present
#
# Since:  0.14.0
##
{ 'BlockInfo': {'device': 'str', 'type': 'str', 'removable': 'bool',
                'locked': 'bool', '*inserted': 'BlockDeviceInfo'} }

##
# @query-block:
#
# Get a list of BlockInfo for all virtual block devices
#
# Returns: a list of @BlockInfo describing each virtual block device
#
# Since: 0.14.0
##
[ 'query-block', {}, ['BlockInfo'] ]

##
# @BlockDeviceStats:
#
# Statistics of a virtual block device or a block backing device.
#
# @rd_bytes:      The number of bytes read by the device.
#
# @wr_bytes:      The number of bytes written by the device.
#
# @rd_operations: The number of read operations performed by the device.
#
# @wr_operations: The number of write operations performed by the device.
#
# @wr_highest_offset: The offset after the greatest byte written to the
#                     device.  The intended use of this information is for
#                     growable sparse files (like qcow2) that are used on top
#                     of a physical device.
#
# Since: 0.14.0
##
{ 'BlockDeviceStats': {'rd_bytes': 'int', 'wr_bytes': 'int',
                       'rd_operations': 'int', 'wr_operations': 'int',
                       'wr_highest_offset': 'int' } }
##
# @BlockStats:
#
# Statistics of a virtual block device or a block backing device.
#
# @device: #optional If the stats are for a virtual block device, the name
#          corresponding to the virtual block device.
#
# @stats:  A @BlockDeviceStats for the device.
#
# @parent: #optional This may point to the backing block device if this is a
#          a virtual block device.  If it's a backing block, this will point
#          to the backing file is one is present.
#
# Since: 0.14.0
##
{ 'BlockStats': {'*device': 'str', 'stats': 'BlockDeviceStats',
                 '*parent': 'BlockStats'} }

##
# @query-blockstats:
#
# Query the @BlockStats for all virtual block devices.
#
# Returns: A list of @BlockStats for each virtual block devices.
#
# Since: 0.14.0
##
[ 'query-blockstats', {}, ['BlockStats'] ]

##
# @VncClientInfo:
#
# Information about all currently connected VNC clients.
#
# @host: The host name of the client.  QEMU tries to resolve this to a DNS name
#        when possible.
#
# @family: `ipv6' if the client is connected via IPv6 and TCP
#          `ipv4' if the client is connected via IPv4 and TCP
#          `unix' if the client is connected via a unix domain socket
#          `unknown' otherwise
#
# @service: The service name of the client's port.  This may depends on the
#           host system's service database so symbolic names should not be
#           relied on.
#
# @x509_dname: #optional If x509 authentication is in use, the Distinguished
#              Name of the client.
#
# @sasl_username: #optional If SASL authentication is in use, the SASL username
#                 used for authentication.
#
# Since: 0.14.0
##
{ 'VncClientInfo': {'host': 'str', 'family': 'str', 'service': 'str',
                    '*x509_dname': 'str', '*sasl_username': 'str'} }

##
# @VncInfo:
#
# Information about the VNC session.
#
# @enabled: true if the VNC server is enabled, false otherwise
#
# @host: #optional The hostname the VNC server is bound to.  This depends on
#        the name resolution on the host and may be an IP address.
#
# @family: #optional `ipv6' if the host is listening for IPv6 connections
#                    `ipv6' if the host is listening for IPv4 connections
#                    `unix' if the host is listening on a unix domain socket
#                    `unknown' otherwise
#
# @auth: the current authentication type used by the server
#        `none' if no authentication is being used
#        `vnc' if VNC authentication is being used
#        `vencrypt+plain' if VEncrypt is used with plain text authentication
#        `vencrypt+tls+none' if VEncrypt is used with TLS and no authentication
#        `vencrypt+tls+vnc' if VEncrypt is used with TLS and VNC authentication
#        `vencrypt+tls+plain' if VEncrypt is used with TLS and plain text auth
#        `vencrypt+x509+none' if VEncrypt is used with x509 and no auth
#        `vencrypt+x509+vnc' if VEncrypt is used with x509 and VNC auth
#        `vencrypt+x509+plain' if VEncrypt is used with x509 and plain text auth
#        `vencrypt+tls+sasl' if VEncrypt is used with TLS and SASL auth
#        `vencrypt+x509+sasl' if VEncrypt is used with x509 and SASL auth
#
# @clients: a list of @VncClientInfo of currently connected clients
#
# Since: 0.14.0
##
{ 'VncInfo': {'enabled': 'bool', '*host': 'str', '*family': 'str',
              '*service': 'str', '*auth': 'str',
              '*clients': ['VncClientInfo']} }

##
# @query-vnc:
#
# Returns information about the current VNC server
#
# Returns: @VncInfo
#
# Since: 0.14.0
##
[ 'query-vnc', {}, 'VncInfo' ]

##
# @NameInfo:
#
# Guest name information.
#
# @name: #optional The name of the guest
#
# Since 0.14.0
##
{ 'NameInfo': {'*name': 'str'} }

##
# @query-name:
#
# Return the name information of a guest.
#
# Returns: @NameInfo of the guest
#
# Since 0.14.0
##
[ 'query-name', {}, 'NameInfo' ]

##
# @UuidInfo:
#
# Guest UUID information.
#
# @UUID: the UUID of the guest
#
# Since: 0.14.0
#
# Notes: If not UUID was specified for the guest, a null UUID is returned.
##
{ 'UuidInfo': {'UUID': 'str'} }

##
# @query-uuid:
#
# Query the guest UUID information.
#
# Returns: The @UuidInfo for the guest
#
# Since 0.14.0
##
[ 'query-uuid', {}, 'UuidInfo' ]

##
# @human-monitor-command:
#
# Execute a command on the human monitor and return the output
#
# @command-line: the command to execute in the human monitor
#
# @cpu-index: #optional The CPU to use for commands that require an implicit CPU
#
# Returns: the output of the command as a string
#
# Since: 0.14.0
#
# Notes: This command only exists as a stop-gap.  It's use is highly
#        discouraged.  The semantics of this command are not guaranteed.
##
[ 'human-monitor-command', {'command-line': 'str', '*cpu-index': 'int'},
  'str' ] 

##
# @CommandInfo:
#
# Information about a QMP command
#
# @name: The command name
#
# Since: 0.14.0
##
{ 'CommandInfo': {'name': 'str'} }

##
# @query-commands:
#
# Return a list of supported QMP commands by this server
#
# Returns: A list of @CommandInfo for all supported commands
#
# Since: 0.14.0
##
[ 'query-commands', {}, ['CommandInfo'] ]

##
# @system_reset:
#
# Performs a hard reset of a guest.
#
# Since: 0.14.0
##
[ 'system_reset', {}, 'none' ]

##
# @system_powerdown:
#
# Requests that a guest perform a powerdown operation.
#
# Since: 0.14.0
#
# Notes: A guest may or may not respond to this command.  This command
#        returning does not indicate that a guest has accepted the request or
#        that it has shut down.  Many guests will respond to this command by
#        prompting the user in some way.
##
[ 'system_powerdown', {}, 'none' ]

##
# @cpu:
#
# This command is a nop that is only provided for the purposes of compatibility.
#
# Since: 0.14.0
#
# Notes: Do not use this command.
##
[ 'cpu', {'index': 'int'}, 'none' ]

##
# @CpuInfo:
#
# Information about a virtual CPU
#
# @CPU: the index of the virtual CPU
#
# @current: this only exists for backwards compatible and should be ignored
# 
# @halted: true if the virtual CPU is in the halt state.  Halt usually refers
#          to a processor specific low power mode.
#
# @pc: #optional If the target is i386 or x86_64, this is the 64-bit instruction
#                pointer.
#                If the target is Sparc, this is the PC component of the
#                instruction pointer.
#
# @nip: #optional If the target is PPC, the instruction pointer
#
# @npc: #optional If the target is Sparc, the NPC component of the instruction
#                 pointer
#
# @PC: #optional If the target is MIPS, the instruction pointer
#
# Since: 0.14.0
#
# Notes: @halted is a transient state that changes frequently.  By the time the
#        data is sent to the client, the guest may no longer be halted.
##
{ 'CpuInfo': {'CPU': 'int', 'current': 'bool', 'halted': 'bool', '*pc': 'int',
              '*nip': 'int', '*npc': 'int', '*PC': 'int'} }

##
# @query-cpus:
#
# Returns a list of information about each virtual CPU.
#
# Returns: a list of @CpuInfo for each virtual CPU
#
# Since: 0.14.0
##
[ 'query-cpus', {}, ['CpuInfo'] ]

##
# @set_link:
#
# Sets the link status of a virtual network adapter
#
# @name: the device name of the virtual network adapter
#
# @up: true to set the link status to be up
#
# Returns: Nothing on success
#          If @name is not a valid network device, DeviceNotFound
#
# Since: 0.14.0
#
# Notes: Not all network adapters support setting link status.  This command
#        will succeed even if the network adapter does not support link status
#        notification.
##
[ 'set_link', {'name': 'str', 'up': 'bool'}, 'none' ]

##
# @set_password:
#
# Sets the password of a remote display session.
#
# @protocol: `vnc' to modify the VNC server password
#            `spice' to modify the Spice server password
#
# @password: the new password
#
# @connected: #optional how to handle existing clients when changing the
#                       password.  If nothing is specified, defaults to `keep' 
#                       `fail' to fail the command if clients are connected
#                       `disconnect' to disconnect existing clients
#                       `keep' to maintain existing clients
#
# Returns: Nothing on success
#          If Spice is not enabled, DeviceNotFound
#          If @protocol does not support connected, InvalidParameter
#          If @protocol is invalid, InvalidParameter
#          If any other error occurs, SetPasswdFailed
#
# Notes: If VNC is not enabled, SetPasswdFailed is returned.  This interface is
#        deprecated starting in 0.15 for use with the VNC server.
#
# Since: 0.14.0
##
[ 'set_password', {'protocol': 'str', 'password': 'str', '*connected': 'str'}, 'none' ]

##
# @expire_password:
#
# Expire the password of a remote display server.
#
# @protocol: the name of the remote display protocol `vnc' or `spice'
#
# @time: when to expire the password.
#        `now' to expire the password immediately
#        `never' to cancel password expiration
#        `+INT' where INT is the number of seconds from now (integer)
#        `INT' where INT is the absolute time in seconds
#
# Returns: Nothing on success
#          If @protocol is `spice' and Spice is not active, DeviceNotFound
#          If an error occurs setting password expiration, SetPasswdFailed
#          If @protocol is not `spice' or 'vnc', InvalidParameter
#
# Since: 0.14.0
#
# Notes: Time is relative to the server and currently there is no way to
#        coordinate server time with client time.  It is not recommended to
#        use the absolute time version of the @time parameter unless you're
#        sure you are on the same machine as the QEMU instance.
##
[ 'expire_password', {'protocol': 'str', 'time': 'str'}, 'none' ]

##
# @KvmInfo:
#
# Information about support for KVM acceleration
#
# @enabled: true if KVM acceleration is active
#
# @present: true if KVM acceleration is built into this executable
#
# Since: 0.14.0
##
{ 'KvmInfo': {'enabled': 'bool', 'present': 'bool'} }

##
# @query-kvm:
#
# Returns information about KVM acceleration
#
# Returns: @KvmInfo
#
# Since: 0.14.0
##
[ 'query-kvm', {}, 'KvmInfo' ]

##
# @ChardevInfo:
#
# Information about a character device.
#
# @label: the label of the character device
#
# @filename: the filename of the character device
#
# Notes: @filename is encoded using the QEMU command line character device
#        encoding.  See the QEMU man page for details.
#
# Since: 0.14.0
##
{ 'ChardevInfo': {'label': 'str', 'filename': 'str'} }

##
# @query-chardev:
#
# Returns information about current character deviecs
#
# Returns: a list of @ChardevInfo
#
# Since: 0.14.0
##
[ 'query-chardev', {}, ['ChardevInfo'] ]

##
# @MouseInfo:
#
# Information about a mouse device.
#
# @name: the name of the mouse device
#
# @index: the index of the mouse device
#
# @current: true if this device is currently receiving mouse events
#
# @absolute: true if this device supports absolute coordinates as input
#
# Since: 0.14.0
##
{ 'MouseInfo': {'name': 'str', 'index': 'int', 'current': 'bool',
                'absolute': 'bool'} }

##
# @query-mice:
#
# Returns information about each active mouse device
#
# Returns: a list of @MouseInfo for each device
#
# Since: 0.14.0
##
[ 'query-mice', {}, ['MouseInfo'] ]

##
# @memsave:
#
# Save a portion of guest memory to a file.
#
# @val: the virtual address of the guest to start from
#
# @size: the size of memory region to save
#
# @filename: the file to save the memory to as binary data
#
# @cpu: #optional the index of the virtual CPU to use for translating the
#                 virtual address (defaults to CPU 0)
#
# Returns: Nothing on success
#          If @cpu is not a valid VCPU, InvalidParameterValue
#          If @filename cannot be opened, OpenFileFailed
#          If an I/O error occurs while writing the file, IOError
#
# Since: 0.14.0
#
# Notes: Errors were not reliably returned until 0.15.0
##
[ 'memsave', {'val': 'int', 'size': 'int', 'filename': 'str',
              '*cpu': 'int'}, 'none' ]

##
# @pmemsave:
#
# Save a portion of guest physical memory to a file.
#
# @val: the physical address of the guest to start from
#
# @size: the size of memory region to save
#
# @filename: the file to save the memory to as binary data
#
# Returns: Nothing on success
#          If @filename cannot be opened, OpenFileFailed
#          If an I/O error occurs while writing the file, IOError
#
# Since: 0.14.0
#
# Notes: Errors were not reliably returned until 0.15.0
##
[ 'pmemsave', {'val': 'int', 'size': 'int', 'filename': 'str'}, 'none' ]

##
# @PciMemoryRange:
#
# A PCI device memory region
#
# @base: the starting address (guest physical)
#
# @limit: the ending address (guest physical)
#
# Since: 0.14.0
##
{ 'PciMemoryRange': {'base': 'int', 'limit': 'int'} }

##
# @PciMemoryRegion
#
# Information about a PCI device I/O region.
#
# @bar: the index of the Base Address Register for this region
#
# @type: `io' if the region is a PIO region
#        `memory' if the region is a MMIO region
#
# @prefetch: #optional if @type is `memory', true if the memory is prefetchable
#
# @mem_type_64: #optional if @type is `memory', true if the BAR is 64-bit
#
# Since: 0.14.0
##
{ 'PciMemoryRegion': {'bar': 'int', 'type': 'str', 'address': 'int',
                      'size': 'int', '*prefetch': 'bool',
                      '*mem_type_64': 'bool' } }

##
# @PciBridgeInfo:
#
# Information about a PCI Bridge device
#
# @bus.number: primary bus interface number.  This should be the number of the
#              bus the device resides on.
#
# @bus.secondary: secondary bus interface number.  This is the number of the
#                 main bus for the bridge
#
# @bus.subordinate: This is the highest number bus that resides below the
#                   bridge.
#
# @bus.io_range: The PIO range for all devices on this bridge
#
# @bus.memory_range: The MMIO range for all devices on this bridge
#
# @bus.prefetchable_range: The range of prefetchable MMIO for all devices on
#                          this bridge
#
# @devices: a list of @PciDeviceInfo for each device on this bridge
#
# Since: 0.14.0
##
{ 'PciBridgeInfo': {'bus': { 'number': 'int', 'secondary': 'int',
                             'subordinate': 'int',
                             'io_range': 'PciMemoryRange',
                             'memory_range': 'PciMemoryRange',
                             'prefetchable_range': 'PciMemoryRange' },
                    '*devices': ['PciDeviceInfo']} }

##
# @PciDeviceInfo:
#
# Information about a PCI device
#
# @bus: the bus number of the device
#
# @slot: the slot the device is located in
#
# @function: the function of the slot used by the device
#
# @class_info.desc: #optional a string description of the device's class
#
# @class_info.class: the class code of the device
#
# @id.device: the PCI device id
#
# @id.vendor: the PCI vendor id
#
# @irq: #optional if an IRQ is assigned to the device, the IRQ number
#
# @qdev_id: the device name of the PCI device
#
# @pci_bridge: if the device is a PCI bridge, the bridge information
#
# @regions: the PCI I/O regions associated with the device
#
# Notes: the contents of @class_info.desc are not stable and should only be
#        treated as informational.
#
# Since: 0.14.0
##
{ 'PciDeviceInfo': {'bus': 'int', 'slot': 'int', 'function': 'int',
                    'class_info': {'*desc': 'str', 'class': 'int'},
                    'id': {'device': 'int', 'vendor': 'int'},
                    '*irq': 'int', 'qdev_id': 'str',
                    '*pci_bridge': 'PciBridgeInfo',
                    'regions': ['PciMemoryRegion']} }

##
# @PciInfo:
#
# Information about a PCI bus
#
# @bus: the bus index
#
# @devices: a list of devices on this bus
#
# Since: 0.14.0
##
{ 'PciInfo': {'bus': 'int', 'devices': ['PciDeviceInfo']} }

##
# @query-pci:
#
# Return information about the PCI bus topology of the guest
#
# Returns: a list of @PciInfo for each PCI bus
#
# Since: 0.14.0
##
[ 'query-pci', {}, ['PciInfo'] ]

##
# @BalloonInfo:
#
# Information about the guest balloon device
#
# @actual: the number of bytes the balloon currently contains
#
# @mem_swapped_in: #optional number of pages swapped in within the guest
#
# @mem_swapped_out: #optional number of pages swapped out within the guest
#
# @major_page_faults: #optional number of major page faults within the guest
#
# @minor_page_faults: #optional number of minor page faults within the guest
#
# @free_mem: #optional amount of memory (in bytes) free in the guest
#
# @total_mem: #optional amount of memory (in bytes) visible to the guest
#
# Since: 0.14.0
#
# Notes: all current versions of QEMU do not fill out optional information in
#        this structure.
##
{ 'BalloonInfo': {'actual': 'int', '*mem_swapped_in': 'int',
                  '*mem_swapped_out': 'int', '*major_page_faults': 'int',
                  '*minor_page_faults': 'int', '*free_mem': 'int',
                  '*total_mem': 'int'} }

##
# @query-balloon:
#
# Return information about the balloon device
#
# Returns: @BalloonInfo on success
#          If the balloon driver is enabled but not functional because the KVM
#            kernel module cannot support it, KvmMissingCap
#          If no balloon device is present, DeviceNotActive
#
# Since: 0.14.0
##
[ 'query-balloon', {}, 'BalloonInfo' ]

##
# @balloon:
#
# Request the balloon driver to change its balloon size.
#
# @value: the target size of the balloon in bytes
#
# Returns: Nothing on success
#          If the balloon driver is enabled but not functional because the KVM
#            kernel module cannot support it, KvmMissingCap
#          If no balloon device is present, DeviceNotActive
#
# Notes: This command just issues a request to the guest.  When it returns,
#        the balloon size may not have changed.  A guest can change the balloon
#        size independent of this command.
#
# Since: 0.14.0
##
[ 'balloon', {'value': 'int'}, 'none' ]

##
# @KeyValues:
#
# A generic representation of a key value pair.
#
# @key: the name of the item
#
# @value: the string representation of the item value.  This typically follows
#         QEMU's command line parsing format.  See the man pages for more
#         information.
#
# Since: 0.14.0
##
{ 'KeyValues': {'key': 'str', 'value': 'str'} }

##
# @device_add:
#
# Add a new device to the guest
#
# @driver: the device type to add
#
# @id: the name of the device
#
# @opts: a list of KeyValues of options specific to each device
#
# Returns: Nothing on success
#          If @driver is not a valid device type, DeviceNotFound
#          If @opts contains an invalid parameter for this device,
#            InvalidParameter
#
# Notes: The semantics of @opts is not well defined.  Future commands will be
#        introduced that provide stronger typing for device creation.
#        This command performs hotplug of devices for guests.  When the command
#        returns, the device may not be visible to the guest.
#
# Since: 0.14.0
##
[ 'device_add', {'driver': 'str', 'id': 'str', '*opts': '**'}, 'none' ]

##
# @device_del:
#
# Remove a device from a guest
#
# @id: the name of the device
#
# Returns: Nothing on success
#          If @id is not a valid device, DeviceNotFound
#          If the device does not support unplug, BusNoHotplug
#
# Notes: When this command completes, the device may not be removed from the
#        guest.  Hot removal is an operation that requires guest cooperation.
#        This command merely requests that the guest begin the hot removal
#        process.
#
# Since: 0.14.0
##
[ 'device_del', {'id': 'str'}, 'none' ]

##
# @netdev_add:
#
# Add a network backend.
#
# @type: the type of network backend.  Current valid values are 'user', 'tap',
#        'vde', 'socket', and 'dump'
#
# @id: the name of the new network backend
#
# @opts: a list of @KeyValues of options specific to each network backend.
#
# Notes: The semantics of @opts is not well defined.  Future commands will be
#        introduced that provide stronger typing for backend creation.
#
# Since: 0.14.0
#
# Returns: Nothing on success
#          If @type is not a valid network backend, DeviceNotFound
#          If @opts contains an invalid parameter for this backend,
#            InvalidParameter
##
[ 'netdev_add', {'type': 'str', 'id': 'str', '*opts': '**'}, 'none' ]

##
# @netdev_del:
#
# Remove a network backend.
#
# @id: the name of the network backend to remove
#
# Returns: Nothing on success
#          If @id is not a valid network backend, DeviceNotFound
#
# Since: 0.14.0
##
[ 'netdev_del', {'id': 'str'}, 'none' ]

### Commands that still need docs ###

[ 'migrate', {'uri': 'str', '*blk': 'bool', '*inc': 'bool'}, 'none' ]
[ 'migrate_cancel', {}, 'none' ]
[ 'migrate_set_speed', {'value': 'int'}, 'none' ]
[ 'migrate_set_downtime', {'value': 'number'}, 'none' ]
{ 'MigrationStats': {'transferred': 'int', 'remaining': 'int', 'total': 'int' } }
{ 'MigrationInfo': {'*status': 'str', '*ram': 'MigrationStats', '*disk': 'MigrationStats'} }
[ 'query-migrate', {}, 'MigrationInfo' ]

[ 'getfd', {'fdname': 'str'}, 'none' ]
[ 'closefd', {'fdname': 'str'}, 'none' ]

{ 'SpiceChannel': {'host': 'str', 'family': 'str', 'port': 'str', 'connection-id': 'int', 'channel-type': 'int', 'channel-id': 'int', 'tls': 'bool'} }
{ 'SpiceInfo': {'enabled': 'bool', '*host': 'str', '*port': 'int', '*tls-port': 'int', '*auth': 'str', '*channels': ['SpiceChannel']} }
[ 'query-spice', {}, 'SpiceInfo' ]

## 0.14.0 Events ##

{ 'SHUTDOWN': {} }
[ 'get-shutdown-event', {}, 'SHUTDOWN' ]

{ 'RESET': {} }
[ 'get-reset-event', {}, 'RESET' ]

{ 'POWERDOWN': {} }
[ 'get-powerdown-event', {}, 'POWERDOWN' ]

{ 'STOP': {} }
[ 'get-stop-event', {}, 'STOP' ]

{ 'RESUME': {} }
[ 'get-resume-event', {}, 'RESUME' ]

{ 'VncServerInfo': { 'host': 'str', 'family': 'str', 'service': 'str',
                     'auth': 'str' } }
{ 'VNC_CONNECTED': { 'client': 'VncClientInfo', 'server': 'VncServerInfo' } }
[ 'get-vnc-connected-event', {}, 'VNC_CONNECTED' ]

{ 'VNC_INITIALIZED': { 'client': 'VncClientInfo', 'server': 'VncServerInfo' } }
[ 'get-vnc-initialized-event', {}, 'VNC_INITIALIZED' ]

{ 'VNC_DISCONNECTED': { 'client': 'VncClientInfo', 'server': 'VncServerInfo' } }
[ 'get-vnc-disconnected-event', {}, 'VNC_DISCONNECTED' ]


{ 'BLOCK_IO_ERROR': { 'device': 'str', 'action': 'str', 'operation': 'str' } }
[ 'get-block-io-error-event', {}, 'BLOCK_IO_ERROR' ]

{ 'RTC_CHANGE': { 'offset': 'int' } }
[ 'get-rtc-change-event', {}, 'RTC_CHANGE' ]

{ 'WATCHDOG': { 'action': 'str' } }
[ 'get-watchdog-event', {}, 'WATCHDOG' ]

{ 'SpiceClientInfo': { 'host': 'str', 'port': 'str', 'family': 'str',
                       '*connection-id': 'int', '*channel-type': 'int',
                       '*channel-id': 'int', '*tls': 'bool' } }
{ 'SpiceServerInfo': { 'host': 'str', 'port': 'str', 'family': 'str',
                       '*auth': 'str' } }
{ 'SPICE_CONNECTED': { 'client': 'SpiceClientInfo',
                       'server': 'SpiceServerInfo' } }
{ 'SPICE_INITIALIZED': { 'client': 'SpiceClientInfo',
                         'server': 'SpiceServerInfo' } }
{ 'SPICE_DISCONNECTED': { 'client': 'SpiceClientInfo',
                          'server': 'SpiceServerInfo' } }

# 0.15.0 commands.  These can be changed up until the next release

##
# @NetworkType:
#
# An enumeration of network types.
#
# @none: a null network backend
#
# @nic: a virtual network adapter
#
# @slirp: usermode networking backend
#
# @tap: a TAP device based networking backend
#
# @socket: a socket based networking backend
#
# @vde: Virtual Distributed Ethernet networking backend
#
# @dump: network backend to capture packets to a file
#
# Since: 0.15.0
##
{ 'NetworkType': ['none', 'nic', 'slirp', 'tap', 'socket', 'vde', 'dump'] }

##
# @NetworkInfo:
#
# Information about a virtual network backend or virtual network adapter.
#
# @name: the name of the network backend or network adapter
#
# @type: the @NetworkType of the network backend or virtual network adapter
#
# @vlan_id: #optional if the network is on a vlan, the vlan id
#
# @peer: #optional if the network is not on a vlan, the peer device
#
# Notes: vlan is not 802.1q VLANs but rather an internal QEMU concept
#
# Since: 0.15.0:
##
{ 'NetworkInfo': {'name': 'str', 'type': 'NetworkType',
                  '*vlan_id': 'int', '*peer': 'str'} }

##
# @query-network:
#
# Return information about all virtual network backends and network adapters
#
# Returns: a list of @NetworkInfo
# 
# Since: 0.15.0
##
[ 'query-network', {}, ['NetworkInfo'] ]

##
# @TapInfo:
#
# Information about a TAP networking backend
#
# @fd: the file descriptor of the TAP device
#
# @vhost_enabled: true if vhost acceleration is enabled for this device
#
# @vnet_hdr_enabled: true if this device is using vnet_hdr
#
# @ufo_enabled: true if UFO offload is enabled
#
# @down_script: #optional the script to execute when the device is torn down
#
# @down_script_arg: #optional the argument to pass the @down_script
#
# Since: 0.15.0
##
{ 'TapInfo': {'fd': 'int', 'vhost_enabled': 'bool',
              'vnet_hdr_enabled': 'bool', 'ufo_enabled': 'bool',
              '*down_script': 'str', '*down_script_arg': 'str'} }

##
# @query-tap:
#
# Return information about a TAP networking backend
#
# @id: the name of a networking backend with @NetworkType `tap'
#
# Returns: @TapInfo about the backend
#          If @id is not a valid networking backend, InvalidParameterValue
#          If @id is not a TAP networking backend, InvalidParameterType
#
# Since: 0.15.0
##
[ 'query-tap', {'id': 'str'}, 'TapInfo' ]

##
# @change-blockdev:
#
# This is the preferred interface for changing a block device.
#
# @device:   The block device name.
#
# @filename: The new filename for the block device.  This may contain options
#            encoded in a format specified by @format.
#
# @format:   #optional The format to use open the block device
#
# @password: #optional The password to use if the block device is encrypted
#
# Returns:  Nothing on success.
#          If @device is not a valid block device, DeviceNotFound
#          If @format is not a valid block format, InvalidBlockFormat
#          If @filename is encrypted and @password isn't supplied,
#            DeviceEncrypted.  The call should be repeated with @password
#            supplied.
#          If @format is not specified and @filename is a format that cannot
#            be safely probed, MissingParameter.
#          If @filename cannot be opened, OpenFileFailed
#
# Since: 0.15.0
##
[ 'change-blockdev', {'device': 'str', 'filename': 'str',
                      '*format': 'str', '*password': 'str'}, 'none' ]

##
# @set-blockdev-password:
#
# Alias for @block_passwd.
#
# @device:   see @block_passwd
# @password: see @block_passwd
#
# Since: 0.15.0
##
[ 'set-blockdev-password', {'device': 'str', 'password': 'str'}, 'none' ]

##
# @change-vnc-listen:
#
# Change the host that the VNC server listens on.
#
# @target:  the new server specification to listen on
#
# Since: 0.15.0
#
# Notes:  At this moment in time, the behavior of existing client connections
#         when this command is executed is undefined.
##
[ 'change-vnc-listen', {'target': 'str'}, 'none' ]

##
# @change-vnc-password:
#
# Change the VNC server password.
#
# @target:  the new password to use with VNC authentication
#
# Since: 0.15.0
#
# Notes:  An empty password in this command will set the password to the empty
#         string.  Existing clients are unaffected by executing this command.
##
[ 'change-vnc-password', {'password': 'str'}, 'none' ]

[ 'put-event', {'tag': 'int'}, 'none' ]

## Internal types ##
{ 'VirtioNetTxStrategy': ['bh', 'timer'] }
{ 'GuestInfo': {'*name': 'str', '*pid': 'int'} }

#[ 'guest-ping', {}, 'none' ]
#[ 'guest-view-file', { 'filename': 'str' }, 'str' ]
